AWSTemplateFormatVersion: "2010-09-09"

# NOTES
# 1) [2023-05] tried to split yml templates in multiple files:
#   > not possible with local yml files
#   > only possible when yml files are stored on S3 buckets

Parameters:
  EnvName:
    Type: String
  ReleaseHash:
    Type: String
  ResourcePrefix:
    Type: String

Resources:
  LambdaApi1:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Just a test lambda LambdaApi1"
      FunctionName: !Sub "${ResourcePrefix}-lbapi1"
      Handler: "app/awsLambdas/src/api/handler.default" # = <path?><fileNameNoExt>.handler
      Code:
        S3Bucket: !Sub "${ResourcePrefix}-releases"
        S3Key: !Sub "release-lbapi1-${ReleaseHash}.zip"
      PackageType: "Zip"
      Role: !GetAtt "LambdaApi1Role.Arn"
      Runtime: "nodejs18.x"
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          NODE_OPTIONS: "--enable-source-maps"
          ENV_NAME: !Sub "${EnvName}"
          RESOURCE_PREFIX: !Sub "${ResourcePrefix}"

  LambdaApi1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      # Description: "Log group for LambdaApi1" # property not allowed for AWS::Logs::LogGroup
      LogGroupName: !Sub "/aws/lambda/${LambdaApi1}"
      RetentionInDays: 7

  LambdaApi1Role:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Role and policies for LambdaApi1 to write logs"
      RoleName: !Sub "${ResourcePrefix}-lbapi1-role"
      Policies:
        - PolicyName: !Sub "${ResourcePrefix}-lbapi1-cloudwatch-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-lbapi1:*"
        - PolicyName: !Sub "${ResourcePrefix}-lbapi1-dynamodb"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-items"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-unique-ids"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-user-calendar"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-user-project"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: sts:AssumeRole

  ApiGw1Rest:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: "Just an API Gateway Gw1 which triggers LambdaApi1"
      ProtocolType: HTTP
      Name: !Sub "${ResourcePrefix}-gw1"

  ApiGw1IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Role and policies for Gateway1 to access lambda"
      RoleName: !Sub "${ResourcePrefix}-gw1-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "access-to-lbapi1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*" # could be more restrictive but Resource is referring to a specific lambda
                Resource: !GetAtt LambdaApi1.Arn

  ApiGw1IntegrationWithLambdaApi1:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: "Definition of how LambdaApi1 and Gateway1 should interact"
      ApiId: !Ref ApiGw1Rest
      ConnectionType: INTERNET # or VPC_LINK for internal connections: todo?
      CredentialsArn: !GetAtt ApiGw1IamRole.Arn
      PassthroughBehavior: WHEN_NO_MATCH # send the request 'as it is' to AWS service
      TimeoutInMillis: 29000
      IntegrationMethod: POST # mandatory for lambda invocations
      IntegrationType: AWS_PROXY # send the request 'as it is' to AWS service
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApi1.Arn}/invocations"

  ApiGw1Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      # Prevents the error: "Unable to deploy API because no routes exist in this API..."
      - ApiGw1RouteGetBoardOfUser
      - ApiGw1RouteCreateItem
      - ApiGw1RouteGetCalendarOfUser
      - ApiGw1RouteGetUserProjects
    Properties:
      Description: "Deployment for API Gateway1"
      ApiId: !Ref ApiGw1Rest

  ApiGw1StageV1:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - ApiGw1Rest
      - ApiGw1Deployment
      - ApiGw1LogGroup
    Properties:
      Description: "Stage v1 for API Gateway1"
      StageName: "v1"
      ApiId: !Ref ApiGw1Rest
      DeploymentId: !Ref ApiGw1Deployment
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGw1LogGroup.Arn
        Format: $context.status "$context.httpMethod $context.protocol $context.path - $context.routeKey"; $context.extendedRequestId $context.identity.sourceIp; $context.authorizer.error; $context.error.message; $context.integration.error;

  ApiGw1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Sub "${ResourcePrefix}-gw1"
          - access-logs

  ApiGw1RouteGetBoardOfUser:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - ApiGw1Rest
      - ApiGw1IntegrationWithLambdaApi1
    Properties:
      # Description: "..."
      ApiId: !Ref ApiGw1Rest
      RouteKey: GET /board/user/{userId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGw1IntegrationWithLambdaApi1

  ApiGw1RouteCreateItem:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - ApiGw1Rest
      - ApiGw1IntegrationWithLambdaApi1
    Properties:
      # Description: "..."
      ApiId: !Ref ApiGw1Rest
      RouteKey: POST /item # body with userId and projectId mandatory
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGw1IntegrationWithLambdaApi1

  ApiGw1RouteGetCalendarOfUser:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - ApiGw1Rest
      - ApiGw1IntegrationWithLambdaApi1
    Properties:
      # Description: "..."
      ApiId: !Ref ApiGw1Rest
      RouteKey: GET /calendar/user/{userId}
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGw1IntegrationWithLambdaApi1

  ApiGw1RouteGetUserProjects:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - ApiGw1Rest
      - ApiGw1IntegrationWithLambdaApi1
    Properties:
      # Description: "..."
      ApiId: !Ref ApiGw1Rest
      RouteKey: GET /user/{userId}/projects
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGw1IntegrationWithLambdaApi1

#Outputs:
#  LambdaFunctionOutput:
#    Value: !Ref LambdaApi1
#    Description: Return Value of Lambda Function